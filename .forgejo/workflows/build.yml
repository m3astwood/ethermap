name: Build & Push Image

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'

jobs:

  build:
    runs-on: docker-dind

    steps:
      - name: Install NodeJS
        run: apk --update add nodejs npm

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine Docker tags
        id: meta
        run: |
          DOCKER_TAGS=""
          IMAGE_NAME="${{ vars.DOCKER_REGISTRY }}/${{ env.FORGEJO_REPOSITORY }}"

          # Check if the trigger was a tag push (e.g., v1.2.3)
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            # Strip the 'v' prefix from the tag name (v1.2.3 -> 1.2.3)
            VERSION=${{ github.ref_name }}
            VERSION=${VERSION#v}
            # Create two tags: one for the specific version and one for 'latest'
            DOCKER_TAGS="$IMAGE_NAME:$VERSION,$IMAGE_NAME:latest"

          # Check if the trigger was a push to the 'main' branch
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            # Read the version from package.json (e.g., 1.2.4-alpha.0)
            VERSION=$(node -p "require('./package.json').version")
            # Strip the trailing pre-release increment (1.2.4-alpha.0 -> 1.2.4-alpha)
            VERSION_NO_INCREMENT=$(echo $VERSION | sed 's/\.[^.]*$//')
            # Create a single tag for the pre-release version
            DOCKER_TAGS="$IMAGE_NAME:$VERSION_NO_INCREMENT"
          fi

          # Output the generated tags for the next step
          echo "tags=${DOCKER_TAGS}" >> $FORGEJO_OUTPUT
          echo "Generated tags: ${DOCKER_TAGS}"

      - name: Build and push the Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
